// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dzhcool/sven/setting"
	"tic4303-mini-proj/api"
	"tic4303-mini-proj/dao"
	"tic4303-mini-proj/middleware"
	"tic4303-mini-proj/page"
	"tic4303-mini-proj/router"
	"tic4303-mini-proj/service"
	"tic4303-mini-proj/service/validation"
)

// Injectors from wire.go:

func initServerRouter() *router.ServerRouter {
	db := middleware.InitMysql()
	userDAO := &dao.UserDAO{
		DB: db,
	}
	userValidationSvc := &validation.UserValidationSvc{
		UserDAO: userDAO,
	}
	v := initJwtSigningKey()
	string2 := initDigestKey()
	userSvc := &service.UserSvc{
		UserDAO:           userDAO,
		UserValidationSvc: userValidationSvc,
		JwtSigningKey:     v,
		DigestKey:         string2,
	}
	userApi := &api.UserApi{
		UserSvc: userSvc,
	}
	infoApi := &api.InfoApi{}
	userPage := &page.UserPage{}
	authFilter := &middleware.AuthFilter{
		JwtSigningKey: v,
		DigestKey:     string2,
		UserSvc:       userSvc,
	}
	serverRouter := &router.ServerRouter{
		UserApi:    userApi,
		InfoApi:    infoApi,
		UserPage:   userPage,
		AuthFilter: authFilter,
	}
	return serverRouter
}

// wire.go:

func initJwtSigningKey() []byte {
	return []byte(setting.Config.MustString("auth.signing.key", "tic4303-mini-proj"))
}

func initDigestKey() string {
	return setting.Config.MustString("auth.digest.key", "digestKey256")
}
